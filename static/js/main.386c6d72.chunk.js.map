{"version":3,"sources":["nric-generator.js","App.js","serviceWorker.js","index.js"],"names":["nricFactory","types","_randomNumber","Math","floor","random","_buildDigits","nric","length","_calculateChecksum","digits","weights","split","reduce","a","b","index","_mapToPrefix","checksum","type","mappings","S","T","F","G","newNricStartingWithS","prefix","newNricStartingWithT","newFinStartingWithG","newFinStartingWithF","App","canvasRef","useRef","handleClick","QRCode","toCanvas","current","errorCorrectionLevel","version","width","margin","then","_","catch","error","console","log","useEffect","className","ref","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","sw"],"mappings":"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","file":"static/js/main.386c6d72.chunk.js","sourcesContent":["export const nricFactory = (() => {\n\n    const types = {\n        S: 'S',\n        T: 'T',\n        F: 'F',\n        G: 'G'\n    }\n\n    const _randomNumber = () => {\n        return Math.floor(Math.random() * 10);\n    }\n\n    const _buildDigits = (nric = '') => {\n        while (nric.length < 7) {\n            nric += _randomNumber()\n        }\n        return nric\n    }\n\n    const _calculateChecksum = (digits) => {\n        const weights = [\n            2,\n            7,\n            6,\n            5,\n            4,\n            3,\n            2\n        ]\n\n        return digits.split('').reduce((a, b, index) => a + b * weights[index], 0)\n\n    }\n\n    const _mapToPrefix = ({ checksum, type }) => {\n\n        const mappings = {\n            [types.S]: 'ABCDEFGHIZJ',\n            [types.T]: 'HIZJABCDEFG',\n            [types.F]: 'KLMNPQRTUWX',\n            [types.G]: 'TUWXKLMNPQR'\n        }\n\n\n        switch (type) {\n            case types.S:\n                return mappings.S[10 - checksum % 11]\n            case types.T:\n                return mappings.T[10 - checksum % 11]\n            case types.F:\n                return mappings.F[10 - checksum % 11]\n            case types.G:\n                return mappings.G[10 - checksum % 11]\n            default:\n                return null\n        }\n    }\n\n    const newNricStartingWithS = () => {\n        const type = types.S\n        const digits = _buildDigits('0000')\n        const checksum = _calculateChecksum(digits)\n        const prefix = _mapToPrefix({ checksum, type })\n        return `${type}${digits}${prefix}`\n    }\n\n    const newNricStartingWithT = () => {\n        const type = types.T\n        const digits = _buildDigits()\n        const checksum = _calculateChecksum(digits)\n        const prefix = _mapToPrefix({ checksum, type })\n        return `${type}${digits}${prefix}`\n    }\n\n    const newFinStartingWithF = () => {\n        const type = types.F\n        const digits = _buildDigits()\n        const checksum = _calculateChecksum(digits)\n        const prefix = _mapToPrefix({ checksum, type })\n        return `${type}${digits}${prefix}`\n    }\n\n    const newFinStartingWithG = () => {\n        const type = types.G\n        const digits = _buildDigits()\n        const checksum = _calculateChecksum(digits)\n        const prefix = _mapToPrefix({ checksum, type })\n        return `${type}${digits}${prefix}`\n    }\n\n    return {\n        newNricStartingWithS,\n        newNricStartingWithT,\n        newFinStartingWithG,\n        newFinStartingWithF\n    }\n})()","import React, { useRef, useEffect } from 'react'\nimport { nricFactory } from './nric-generator'\nimport QRCode from 'qrcode'\nimport './App.css'\n\n\nconst App = () => {\n\n  const canvasRef = useRef(null)\n\n  const handleClick = () => {\n    const nric = nricFactory.newNricStartingWithS()\n    QRCode.toCanvas(canvasRef.current, nric, { errorCorrectionLevel: 'H', version: 3, width: 250, margin: 0 })\n      .then(_ => null)\n      .catch(error => console.log('error -->', error))\n  }\n\n  useEffect(handleClick, [])\n\n  return (\n    <div className=\"container\">\n      <canvas\n        ref={canvasRef}\n        className=\"myQR\"\n        onClick={handleClick} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as sw from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nsw.register()"],"sourceRoot":""}